# This Containerlab configuration, 'lab01', sets up a network simulation environment with spine and leaf switches.
# The key component is Netbox, which manages the network inventory. Netbox waits for its dependencies (PostgreSQL and Redis)
# to be ready, then initializes and creates an admin user. 

name: lab01
prefix: ""
mgmt:
  network: lab01
  bridge: lab01
  ipv4-subnet: 172.20.21.0/24

topology:
  kinds:
    srl:
      image: ghcr.io/nokia/srlinux:24.3.2
    linux:
      image: ghcr.io/hellt/network-multitool

  nodes:
    lab01-l1:
      kind: srl
      type: ixrd2
      mgmt-ipv4: 172.20.21.11
      labels:
        graph-level: 2
        graph-icon: switch

    lab01-l2:
      kind: srl
      type: ixrd2
      mgmt-ipv4: 172.20.21.12
      labels:
        graph-level: 2
        graph-icon: switch

    lab01-l3:
      kind: srl
      type: ixrd2
      mgmt-ipv4: 172.20.21.13
      labels:
        graph-level: 2
        graph-icon: switch

    lab01-l4:
      kind: srl
      type: ixrd2
      mgmt-ipv4: 172.20.21.14
      labels:
        graph-level: 2
        graph-icon: switch

    lab01-s1:
      kind: srl
      type: ixrd3l
      mgmt-ipv4: 172.20.21.101
      labels:
        graph-level: 1
        graph-icon: switch

    lab01-s2:
      kind: srl
      type: ixrd3l
      mgmt-ipv4: 172.20.21.102
      labels:
        graph-level: 1
        graph-icon: switch

    lab01-client1:
      kind: linux
      mgmt-ipv4: 172.20.21.133
      labels:
        graph-level: 3 
        graph-icon: host 
      exec:
        - ip link add bond0 type bond mode 802.3ad
        - ip link set addr 00:c1:ab:00:01:21 dev bond0
        - ip link add link bond0 name bond0.201 type vlan id 201
        - ip addr add 10.20.1.2/24 dev bond0.201
        - ip link set eth1 down
        - ip link set eth2 down
        - ip link set eth1 master bond0
        - ip link set eth2 master bond0
        - ip link set eth1 up
        - ip link set eth2 up
        - ip link set bond0 up
        - ip route add 10.20.2.0/24 via 10.20.1.254
    lab01-client2:
      kind: linux
      mgmt-ipv4: 172.20.21.134
      labels:
        graph-level: 3 
        graph-icon: host 
      exec:
        - ip link add bond0 type bond mode 802.3ad
        - ip link set addr 00:c1:ab:00:01:22 dev bond0
        - ip link add link bond0 name bond0.202 type vlan id 202
        - ip addr add 10.20.2.2/24 dev bond0.202
        - ip link set eth1 down
        - ip link set eth2 down
        - ip link set eth1 master bond0
        - ip link set eth2 master bond0
        - ip link set eth1 up
        - ip link set eth2 up
        - ip link set bond0 up
        - ip route add 10.20.1.0/24 via 10.20.2.254

    ### Netbox ###
    # Configuration for PostgreSQL, Redis, and Netbox for network inventory management
    postgres:
      kind: linux
      image: docker.io/postgres:16-alpine
      env:
        POSTGRES_DB: netbox
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      # binds:
      #   # Mount an initialization script
      #   - config/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

    redis:
      kind: linux
      image: docker.io/redis:7-alpine

    netbox:
      # Netbox configuration with dependencies on postgres and redis
      kind: linux
      image: lscr.io/linuxserver/netbox:latest
      env:
        PUID: 0
        PGID: 0
        TZ: Etc/UTC
        SKIP_SUPERUSER: false
        SUPERUSER_EMAIL: admin@admin.com
        SUPERUSER_NAME: admin
        SUPERUSER_PASSWORD: admin
        SUPERUSER_API_TOKEN: c4cd2e9bf74869feb061eba14b090b4811353d9c
        ALLOWED_HOST: "*"
        DEBUG: true
        DB_NAME: netbox
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: postgres
        DB_PORT: 5432
        REDIS_HOST: redis
        REDIS_PORT: 6379
      ports:
        - 8000:8000
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://netbox:8000/api/ || exit 1"]
        timeout: 10
        retries: 100
      stages:
        create:
          wait-for:
            - node: postgres
              stage: create
            - node: redis
              stage: create
        healthy:
         exec:
           on-exit:
            - sh -c "echo \"from django.contrib.auth.models import User; from users.models import Token; User.objects.get(username='admin').tokens.create(key='c4cd2e9bf74869feb061eba14b090b4811353d9c')\" | /app/netbox/netbox/manage.py shell --interface python"
      binds:
        - config/configuration.py:/config/configuration.py
        - config/local_settings.py:/app/netbox/netbox/netbox/local_settings.py
        - nokia-srl-netbox-scripts:/config/scripts
        - config/01-install-plugins.sh:/custom-cont-init.d/01-install-plugins.sh
    netbox_importer:
      kind: linux
      image: flosch62/netbox-importer:latest
      env:
        REPO_URL: https://github.com/netbox-community/devicetype-library.git
        NETBOX_URL: http://netbox:8000
        NETBOX_TOKEN: c4cd2e9bf74869feb061eba14b090b4811353d9c
        IGNORE_SSL_ERRORS: False
      #  https_proxy: http://10.158.100.1:8080
      entrypoint: ./nb-dt-import.py --vendors Nokia
      stages:
        create:
          wait-for:
            - node: netbox
              stage: healthy

  links:
    - endpoints: ["lab01-l1:e1-50", "lab01-s1:e1-1"]
    - endpoints: ["lab01-l1:e1-49", "lab01-s2:e1-1"]
    - endpoints: ["lab01-l2:e1-50", "lab01-s1:e1-2"]
    - endpoints: ["lab01-l2:e1-49", "lab01-s2:e1-2"]
    - endpoints: ["lab01-l3:e1-50", "lab01-s1:e1-3"]
    - endpoints: ["lab01-l3:e1-49", "lab01-s2:e1-3"]
    - endpoints: ["lab01-l4:e1-50", "lab01-s1:e1-4"]
    - endpoints: ["lab01-l4:e1-49", "lab01-s2:e1-4"]
    - endpoints: ["lab01-client1:eth1", "lab01-l1:e1-1"]
    - endpoints: ["lab01-client1:eth2", "lab01-l2:e1-1"]
    - endpoints: ["lab01-client2:eth1", "lab01-l3:e1-1"]
    - endpoints: ["lab01-client2:eth2", "lab01-l4:e1-1"]
